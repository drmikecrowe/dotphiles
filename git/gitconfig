#
# dotphiles : https://github.com/dotphiles/dotphiles
#
# Git configuration.
#
# Authors:
#   Ben O'Hara <bohara@gmail.com>
#

# Global Config

# [include]
#     path = ~/.gitconfig-color

[includeIf "gitdir:~/Programming/Personal/"]
    path = ~/Programming/Personal/.gitconfig

[includeIf "gitdir:~/.dotfiles/"]
    path = ~/Programming/Personal/.gitconfig

[url "git@github.com:"]
    insteadof = github:

[credential]
	helper = store

[branch "master"]
    remote = origin
    merge = refs/heads/master

[core]
    pager = less -FRSX
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	autocrlf = input

[diff]
    tool = meld

[difftool]
    prompt = false

[merge]
    tool = meld

[alias]
    # branch
    b  = branch
    bc = checkout -b
    bl = branch -v
    bL = branch -av
    bx = branch -d
    bX = branch -D
    bm = branch -m
    bM = branch -M
    bs = show-branch
    bS = show-branch -a

    br = branch --no-merge development
    bra = branch

    # checkout/fetch/merge/push/rebase
    # checkout
    co  = checkout
    co0 = checkout HEAD --
    # fetch
    f   = fetch
    fm  = pull
    fo  = fetch origin
    # merge
    m   = merge
    mom = merge origin/master
    # push
    p   = push
    pa  = push --all
    pt  = push --tags
    # rebase
    r   = rebase
    ra  = rebase --abort
    rc  = rebase --continue
    ri  = rebase --interactive
    rs  = rebase --skip
    rom = rebase origin/master

    # commit
    c      = commit -v
    ca     = commit --all -v
    cm     = commit --message
    cam    = commit --all --message
    camend = commit --amend --reuse-message HEAD
    cundo  = reset --soft "HEAD^"
    cp     = cherry-pick

    # diff
    d    = diff          # Diff working dir to index
    ds   = diff --staged # Diff index to HEAD
    dc   = diff --staged # Diff index to HEAD
    dh   = diff HEAD     # Diff working dir and index to HEAD
    hub  = browse
    hubd = compare

    # index
    s  = status
    a  = add
    ia = add
    ir = reset

    # log
    l   = log --topo-order --pretty=format:'%C(yellow)%h %C(cyan)%cn %C(blue)%cr%C(reset) %s'
    ls  = log --topo-order --stat --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    ld  = log --topo-order --stat --patch --full-diff --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    lg  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lga = log --topo-order --all --graph --pretty=format:'%C(yellow)%h %C(cyan)%cn%C(reset) %s %C(red)%d%C(reset)%n'
    lm  = log --topo-order --pretty=format:'%s'
    lh  = shortlog --summary --numbered
    llf = fsck --lost-found

    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all

    # remote
    re  = remote
    rel = remote --verbose
    rea = remote add
    rex = remote rm
    rem = remote rename

    # grep
    find = log --pretty=\"format:%Cgreen%H %Cblue%s\" --name-status --grep

    safereset = "!f() { \
	trap 'echo ERROR: Operation failed; return' ERR; \
	echo Making sure there are no changes...; \
	last_status=$(git status --porcelain);\
	if [[ $last_status != \"\" ]]; then\
		echo There are dirty files:;\
		echo \"$last_status\";\
		echo;\
		echo -n \"Enter Y if you would like to DISCARD these changes or W to commit them as WIP: \";\
		read dirty_operation;\
		if [ \"$dirty_operation\" == \"Y\" ]; then \
			echo Resetting...;\
			git reset --hard;\
		elif [ \"$dirty_operation\" == \"W\" ]; then\
			echo Comitting WIP...;\
			git commit -a --message='WIP' > /dev/null && echo WIP Comitted;\
		else\
			echo Operation cancelled;\
			exit 1;\
		fi;\
	fi;\
}; \
f"

    switch = "!f() { \
	trap 'echo ERROR: Operation failed; return' ERR; \
	\
	[ -z \"$1\" ] && echo "SHA/branch required, e.g 73bd32f" && exit 1; \
	git safereset;\
	echo ---- Checking out $1 ----; \
	git checkout $1;\
	echo ---- Restoring WIP if exists ----; \
	last_commit=$(git log -1 HEAD --pretty=format:%s);\
	[ \"$last_commit\" == \"WIP\" ] && { echo Reverting WIP commit... && git reset --soft HEAD~1; } || echo No WIP commit;\
}; \
f"

    switch-back = "!f() { \
	trap 'echo ERROR: Operation failed; return' ERR; \
	\
	echo ---- Checking out previous branch ----; \
	git switch @{-1};\
}; \
f"

    arc = "!git tag archive/$1 $1 && git branch -D"
    rename = "!moveit() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; moveit"

    unpushed-branches = "!git log --branches --not --remotes --no-walk --decorate --oneline"

[push]
	default = current


[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[init]
	templatedir = ~/.git-templates
[user]
	email = drmikecrowe@gmail.com
	name = Mike Crowe
